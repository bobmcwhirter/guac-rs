use crate::client::vulnerability::ingest::IngestVulnerability;

//use crate::client::package::query::QueryPackage;
use crate::client::GuacClient;
use graphql_client::reqwest::post_graphql;
use serde::{Deserialize, Serialize};
use crate::client::vulnerability::query::QueryVulnerability;

use super::Error;

pub mod ingest;
pub mod query;

impl GuacClient {
    pub async fn ingest_vulnerability(&self, ty: &str, vuln_id: &str) -> Result<(), Error> {
        use self::ingest::ingest_vulnerability;
        let vuln = ingest_vulnerability::VulnerabilityInputSpec{
            type_: ty.to_string(),
            vulnerability_id: vuln_id.to_string(),
        };
        let variables = ingest_vulnerability::Variables { vuln  };
        let response_body =
            post_graphql::<IngestVulnerability, _>(&self.client, self.url.to_owned(), variables).await?;

        println!("{:?}", response_body);

        let _ = response_body
            .data
            .ok_or(Error::GraphQL("No data found in response".to_string()));

        Ok(())
    }

    pub async fn get_vulnerabilities(&self, ty: Option<String>, vuln_id: Option<String>) -> Result<Vec<Vulnerability>, Error> {
        use self::query::query_vulnerability;
        let vuln = query_vulnerability::VulnerabilitySpec {
            id: None,
            no_vuln: None,
            type_: ty,
            vulnerability_id: vuln_id,
        };

        let variables = query_vulnerability::Variables { vuln };
        let response_body =
            post_graphql::<QueryVulnerability, _>(&self.client, self.url.to_owned(), variables).await?;
        let response_data = response_body
            .data
            .ok_or(Error::GraphQL("No data found in response".to_string()))?;
        Ok(response_data
            .vulnerabilities
            .iter()
            .flat_map(|e| {
                e.vulnerability_i_ds.iter().map(|id| {
                    Vulnerability {
                        ty: e.type_.clone(),
                        vulnerability_id: id.vulnerability_id.clone(),
                    }
                })
            })
            .collect())
    }
}

#[derive(Serialize, Deserialize)]
pub struct Vulnerability {
    //id: String,
    pub ty: String,
    pub vulnerability_id: String,
}

impl Vulnerability {

    pub fn ty(&self) -> String {
        self.ty.clone()
    }
    pub fn id(&self) -> String {
        self.vulnerability_id.clone()
    }
}
